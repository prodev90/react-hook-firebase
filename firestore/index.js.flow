// @flow
import typeof { FirebaseError } from 'firebase';
import type {
  DocumentReference,
  DocumentSnapshot,
  GetOptions,
  Query,
  QuerySnapshot,
  SnapshotListenOptions,
} from 'firebase/firestore';

type LoadingHook<T> = [T | void, boolean, FirebaseError | void];

export type CollectionHook = LoadingHook<QuerySnapshot>;
export type CollectionDataHook<T> = LoadingHook<T[]>;
export type DocumentHook = LoadingHook<DocumentSnapshot>;
export type DocumentDataHook<T> = LoadingHook<T>;

declare export function useCollection(
  query?: Query | null,
  options?: SnapshotListenOptions
): CollectionHook;
declare export function useCollectionOnce(
  query?: Query | null,
  options?: GetOptions
): CollectionHook;
declare export function useCollectionData<T>(
  query?: Query | null,
  options?: {
    idField?: string,
    snapshotListenOptions?: SnapshotListenOptions,
  }
): CollectionDataHook<T>;
declare export function useCollectionDataOnce<T>(
  query?: Query | null,
  options?: {
    getOptions?: GetOptions,
    idField?: string,
  }
): CollectionDataHook<T>;
declare export function useDocument(
  ref?: DocumentReference | null,
  options?: SnapshotListenOptions
): DocumentHook;
declare export function useDocumentOnce(
  ref?: DocumentReference | null,
  options?: GetOptions
): DocumentHook;
declare export function useDocumentData<T>(
  ref?: DocumentReference | null,
  options?: {
    idField?: string,
    snapshotListenOptions?: SnapshotListenOptions,
  }
): DocumentDataHook<T>;
declare export function useDocumentDataOnce<T>(
  ref?: DocumentReference | null,
  options?: {
    getOptions?: GetOptions,
    idField?: string,
  }
): DocumentDataHook<T>;
